Sizes
	-uint: 4byte
	-uint8: 1byte
	-uint16: 2 byte
	-uint32: 4byte
	-int: 4byte
	-word: 2 byte
	-doubble word: 4 byte



-ghidra is the decompiler open source we are going to use.
	-new project, import binary
	-open the file loaded and analyze it


  	 setvbuf(stdin,(char *)0x0,2,0);
 	 setvbuf(stdout,(char *)0x0,2,0);
	-disable buffers that are standard for the libc but create some problems when the code is accessed remotely

	-size of buffers guessed by the decompiler

	-light blue variables are global variables

	-for read and writes File Descriptor 1 and 0 are for standard input and output (they are also interchangable)

	-ALT left arrow some times brings you back to the previous function

	-*param_1 = buffer._0_8_
	writes the first 8 bytes of buffer in param_1

	-param_1[0x1ff] = buffer._4088_8_;
	writes the last 8 bytes of buffer (actually the 8 bytes after 4088)

	-uint8 * x;   	//pointer to a single byte (unsigned int)
	x = 0x100;    	//actually 256
	x = x + 1;	//x = 0x101
	(int *) x + 1;  //x = 0x105
	(ulong *) x + 1;  // x= 0x113
	the sum depends by the type of the pointer. (number=1,int*=4, ulong*=8)

	-  -1 = .. ff ff ff ff
	   -2 = .. ff ff ff fe

	-size of buffers are usually calculated 8 higher because compiler doesent' know about the base pointer.

	-(lng & 0xFF000000)     --> and bit a bit: takes only the first byte

	- bytes[0] << 8		--> shifts the first 8 bits of 8 positions